{
	"info": {
		"_postman_id": "1fad6345-0f93-4f8b-ac71-5ceb355212b0",
		"name": "Loot Chest API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2668384"
	},
	"item": [
		{
			"name": "Keys",
			"item": [
				{
					"name": "Award Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('success');",
									"  pm.expect(responseData).to.have.property('awarded');",
									"  pm.expect(responseData).to.have.property('data');",
									"  pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'success' field is a boolean\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.success).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'awarded' field is a boolean\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.awarded).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'data' field is null\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/keys/award",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"keys",
								"award"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Admin Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.be.an('array').and.to.not.be.empty;",
									"",
									"  responseData.data.forEach(function(user) {",
									"    pm.expect(user.email).to.be.a('string').and.to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the success field is true\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.success).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'data' object is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.data).to.exist;",
									"",
									"    const data = responseData.data;",
									"",
									"    pm.expect(data.id).to.exist;",
									"    pm.expect(data.username).to.exist;",
									"    pm.expect(data.email).to.exist;",
									"    pm.expect(data.isAdmin).to.exist;",
									"    pm.expect(data.createdAt).to.exist;",
									"    pm.expect(data.updatedAt).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'message' field is an empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.an('string').and.to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJjbHJzaGYwazEwMDAwZDgxMGRvNGdveWliIn0.Oeire83UDCfXP6ccFJMsiEPKUsUYuCJD15qBkoPQqio",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/cltdpd09i00007yb7mogm9dt6",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"cltdpd09i00007yb7mogm9dt6"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Sign Up",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "vinnyhoward",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password123",
									"type": "text"
								},
								{
									"key": "email",
									"value": "vincenguyenhoward@gmail.com",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.success).to.exist;",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.token).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Validate the data object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data).to.exist;",
									"  pm.expect(responseData.data).to.be.an('object');",
									"  ",
									"  const data = responseData.data;",
									"  ",
									"  pm.expect(data.id).to.exist.and.to.be.a('string');",
									"  pm.expect(data.username).to.exist.and.to.be.a('string');",
									"  pm.expect(data.email).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data.email).to.match(/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, \"Email is not in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "vincenguyenhoward@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "userid",
								"value": "clrsfhs6f0000a0bdhuomk4l4",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/users/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.success).to.exist;",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Data is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"The 'awardedAt' field in 'data' is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    responseData.data.forEach(function (item) {",
									"        pm.expect(item.awardedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "userid",
								"value": "{{userId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId}}/keys",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "userId",
								"value": "clrtzxysn00001vfjlndzpf7o",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "vinnyhoward",
									"type": "text"
								},
								{
									"key": "email",
									"value": "vincenguyenhoward@gmail.com",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.success).to.exist;",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Success field is a boolean\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.success).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Data field should be null\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.data).to.be.null;",
									"});",
									"",
									"",
									"pm.test(\"Message field should be a string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"vincenguyenhoward@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/forgot-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"forgot-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chests",
			"item": [
				{
					"name": "Get All Chests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.success).to.exist;",
									"  pm.expect(responseData.data).to.exist;",
									"  pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'data' array is present and not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data).to.exist.and.to.be.an('array');",
									"  pm.expect(responseData.data).to.have.lengthOf.at.least(1, \"Array should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Validate chestName and isHidden properties\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.be.an('array');",
									"",
									"  responseData.data.forEach(function(chest) {",
									"    pm.expect(chest.chestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"chestName should not be empty\");",
									"    pm.expect(chest.isHidden).to.be.a('boolean');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'rewardList' array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
									"    responseData.data.forEach(function (item) {",
									"        pm.expect(item.rewardList).to.exist.and.to.be.an('array').that.is.not.empty;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/chests/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chests",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Open Chest",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"type": "text"
								},
								{
									"key": "keyId",
									"value": "clszr7qpz00056mw2sil4hcdb",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/chests/03bf6655-fc3a-44f7-b609-634fd2182faa/open",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chests",
								"03bf6655-fc3a-44f7-b609-634fd2182faa",
								"open"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Chest Interactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"The success field should be a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"  ",
									"    pm.expect(responseData.success).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Data field is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"The 'openedAt' field is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function (interaction) {",
									"        pm.expect(interaction.openedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/chests/me/interactions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chests",
								"me",
								"interactions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Prizes",
			"item": [
				{
					"name": "Get User Prizes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('success');",
									"  pm.expect(responseData).to.have.property('data');",
									"  pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'id' field in the 'data' array is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.data.forEach(function (item) {",
									"        pm.expect(item.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/prizes/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"prizes",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Prizes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'success' field is true\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.success).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'data' field is an array and is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"'data' field should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Each object in the 'data' array has a non-empty 'id'\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function (item) {",
									"        pm.expect(item.id).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/prizes/all?page=1&limit=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"prizes",
								"all"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Prizes by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"name": "authorization",
								"sortOrder": 0,
								"infoTitle": "This header was automatically added",
								"info": "This header is added because of the authorization method used for this request.\n\nThe value of this header is tentative. You can find the exact value in the console once the request is sent.\n\nUse the authorization tab to remove authorization or to change the value of this header.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to authorization",
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"system": true,
								"auth": true,
								"type": "text"
							},
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text"
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text"
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text"
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.32.1",
								"system": true,
								"type": "text"
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text"
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text"
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text"
							},
							{
								"key": "id",
								"value": "clrvhx8ak000010nwbbu1fimp",
								"type": "text",
								"id": 0
							}
						],
						"url": {
							"raw": "{{base_url}}/prizes/user/clrvhx8ak000010nwbbu1fimp",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"prizes",
								"user",
								"clrvhx8ak000010nwbbu1fimp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - success, data, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.success).to.exist;",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Success field is a boolean\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.success).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Data field should be null\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data).to.be.null;",
									"});",
									"",
									"",
									"pm.test(\"Message field is an empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health-check",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health-check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Prize Fulfillment by Id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/prizes/clrwu7ws300012adnzit6cyw6/fulfillment",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"prizes",
								"clrwu7ws300012adnzit6cyw6",
								"fulfillment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Prize Fulfillment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "firstName",
									"value": "John",
									"type": "text"
								},
								{
									"key": "lastName",
									"value": "Doe",
									"type": "text"
								},
								{
									"key": "phoneNumber",
									"value": "1234567890",
									"type": "text"
								},
								{
									"key": "email",
									"value": "john.doe@example.com",
									"type": "text"
								},
								{
									"key": "address",
									"value": "123 Main St",
									"type": "text"
								},
								{
									"key": "country",
									"value": "Fake Land",
									"type": "text"
								},
								{
									"key": "state",
									"value": "Example State",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Sample City",
									"type": "text"
								},
								{
									"key": "zip",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "cryptoWalletAddress",
									"value": "0x4B0897b0513fdC82Cf4F3d7C310a8DdE89b0CE60",
									"type": "text"
								},
								{
									"key": "prizeLogId",
									"value": "clszqqa2o000181z9oczba6gi",
									"type": "text"
								},
								{
									"key": "sanityRewardId",
									"value": "4e29c8344717",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/prizes/fulfillment",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"prizes",
								"fulfillment"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}