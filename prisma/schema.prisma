// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "node_modules/.prisma/client"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x", "debian-openssl-1.1.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                 @id @default(cuid())
  email             String                 @unique
  username          String                 @unique
  password          String
  isAdmin           Boolean                @default(false)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  chestInteractions UserChestInteraction[]
  prizeLogs         PrizeLog[]
  prizeFulfillments PrizeFulfillment[]
  userKey           UserKey[]
}

model UserKey {
  // May add different key types for different chests in the future
  id                String                 @id @default(cuid())
  userId            String
  awardedAt         DateTime               @default(now())
  usedAt            DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  User              User?                  @relation(fields: [userId], references: [id])
  chestInteractions UserChestInteraction[]
}

// TODO: Commented out for now. May or may not use this model
// model SanityChest {
//   id                String                 @id @default(cuid())
//   name              String
//   description       String
//   createdAt         DateTime               @default(now())
//   updatedAt         DateTime               @updatedAt
//   chestInteractions UserChestInteraction[]
//   prizeLogs         PrizeLog[]
// }

model UserChestInteraction {
  id            String      @id @default(cuid())
  userId        String
  userKeyId     String
  sanityChestId String?
  openedAt      DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User?       @relation(fields: [userId], references: [id])
  userKey       UserKey?    @relation(fields: [userKeyId], references: [id])
  prizeLogs     PrizeLog[]
  // SanityChest   SanityChest? @relation(fields: [sanityChestId], references: [id])
}

model PrizeLog {
  id                 String            @id @default(cuid())
  userId             String
  chestInteractionId String            @unique
  wonAt              DateTime          @default(now())
  itemWon            String
  sanityChestId      String
  rewardImageRef     String
  rollValue          Float
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  user               User              @relation(fields: [userId], references: [id])
  chestInteraction   UserChestInteraction @relation(fields: [chestInteractionId], references: [id])
  prizeFulfillment   PrizeFulfillment?
  // SanityChest        SanityChest?       @relation(fields: [sanityChestId], references: [id])
}

model PrizeFulfillment {
  id                  String    @id @default(cuid())
  sanityRewardId      String
  prizeLogId          String    @unique
  claimedAt           DateTime  @default(now())
  claimed             Boolean   @default(false)
  userId              String
  firstName           String?
  lastName            String?
  phoneNumber         String?
  email               String?
  address             String?
  country             String?
  state               String?
  city                String?
  zip                 String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  cryptoWalletAddress String?
  user                User?      @relation(fields: [userId], references: [id])
  prizeLog            PrizeLog?  @relation(fields: [prizeLogId], references: [id])
}
